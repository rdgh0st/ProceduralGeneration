import java.util.Random;

import org.newdawn.slick.BasicGame;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.geom.Vector2f;
import org.newdawn.slick.Color;

public class GameScreen extends BasicGame {

	private Vector2f position;
	private Vector2f dimensions;
	private Zone[][] zones;
	private ZoneGenerator generator;
	
	/**
	 * Constructor for the GameScreen
	 * @param title
	 * @param height
	 * @param width
	 */
	public GameScreen(String title, int height, int width) {
		super(title);
		this.position = new Vector2f();
		this.dimensions = new Vector2f();
		zones = new Zone[height][width];
		generator = new ZoneGenerator();
	}

	/**
	 * For each zone that has been created, loop through and use its drawSelf function, changing the position accordingly
	 */
	@Override
	public void render(GameContainer container, Graphics painter) throws SlickException {
		for (int i = 0; i < zones.length; i++) {
			for (int j = 0; j < zones[i].length; j++) {
				zones[i][j].drawSelf(painter, 15 * j, 15 * i);
			}
		}
	}

	/**
	 * Sets original position and dimensions before applying the logic for zone creation
	 */
	@Override
	public void init(GameContainer container) throws SlickException {
		// TODO Auto-generated method stub
		this.position.set(10, 10);
		this.dimensions.set(10, 10);
		
		// Pick random starting zone
		zones[0][0] = generator.makeRandomZone();
		
		// initialize random variables and two potential zones
		Random random = new Random();
		Zone newZone1 = null;
		Zone newZone2 = null;
		// loop through all zones
		for (int i = 0; i < zones.length; i++) {
			for (int j = 0; j < zones[i].length; j++) {
				// if it is the last zone in the row, we pass and let the first zone in the next row be generated by the zone above it
				if (j != zones[i].length - 1) {
					// generate a potential neighbor on the right using the current zone (on the left)
					newZone1 = zones[i][j].GenerateNeighbor();
					if (i != 0) {
						// if it is not the first row, also generate a potential neighbor on the right using the zone above it
						newZone2 = zones[i - 1][j + 1].GenerateNeighbor();
						
						// pick one of these zones randomly and assign it to the zone on the right
						if (random.nextInt(2) == 0) {
							zones[i][j + 1] = newZone1;
						} else {
							zones[i][j + 1] = newZone2;
						}
					} else {
						// if it is the first row, just generate the zone from the left
						zones[i][j + 1] = newZone1;
					}
				}
			}
			// after getting through a full row, as long as it was not the last row, generate the first zone in the next row using the zone above it
			if (i != zones.length - 1) {
				zones[i + 1][0] = zones[i][0].GenerateNeighbor();
			}
		}
	}

	@Override
	public void update(GameContainer arg0, int arg1) throws SlickException {
		// TODO Auto-generated method stub
		
	}

}
